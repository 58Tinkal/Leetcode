class Solution {
public:
    int n;
    int solve(vector<vector<int>>& adj, vector<int>& initial, int x) {
        int count = 0;
        vector<int> vis(n, 0);
        queue<int> q;
        for (int i = 0; i < initial.size(); i++) {
            if (initial[i] == x)
                continue;
            q.push(initial[i]);
            vis[initial[i]] = 1;
            count++;
        }
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            for (auto it : adj[node]) {
                if (!vis[it]) {
                    q.push(it);
                    vis[it] = 1;
                    count++;
                }
            }
        }
        return count;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n = graph.size();
        vector<vector<int>> adj(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j)
                    continue;
                if (graph[i][j]) {
                    adj[i].push_back(j);
                }
            }
        }
        int ans = INT_MAX;
        int mini = INT_MAX;
        for (int i = 0; i < initial.size(); i++) {
            int x = solve(adj, initial, initial[i]);
            if (x < mini) {
                ans = initial[i];
                mini = x;
            }
            if (mini == x) {
                ans = min(ans, initial[i]);
            }
        }
        return ans;
    }
};