class Solution {
public:
    int solve(vector<vector<int>>& graph, vector<int>& nums, int x) {
        int n = graph.size();
        queue<int> q;
        int count = 0;
        vector<int> vis(n, 0);
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == x)
                continue;
            q.push(nums[i]);
            vis[nums[i]] = 1;
            count++;
        }
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            for (int i = 0; i < n; i++) {
                if (i == x || i == node || graph[node][i] == 0)
                    continue;
                if (graph[node][i] && !vis[i]) {
                    q.push(i);
                    vis[i] = 1;
                    count++;
                }
            }
        }
        return count;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& nums) {

        int ans = INT_MAX;
        int mini = INT_MAX;

        for (int i = 0; i < nums.size(); i++) {
            int x = solve(graph, nums, nums[i]);
            if (x < mini) {
                ans = nums[i];
                mini = x;
            }
            if (x == mini) {
                ans = min(ans, nums[i]);
            }
        }
        return ans;
    }
};