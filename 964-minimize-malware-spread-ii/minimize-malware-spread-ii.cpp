class DisjointSet {
    vector<int> parent, size;
public:
    DisjointSet(int n) {
        parent.resize(n);
        size.resize(n, 1);
        for(int i=0;i<n;i++) parent[i]=i;
    }
    int findUPar(int node) {
        if(node==parent[node]) return node;
        return parent[node]=findUPar(parent[node]);
    }
    void unionBySize(int u,int v) {
        int pu=findUPar(u), pv=findUPar(v);
        if(pu==pv) return;
        if(size[pu]<size[pv]){
            parent[pu]=pv;
            size[pv]+=size[pu];
        } else {
            parent[pv]=pu;
            size[pu]+=size[pv];
        }
    }
    int getSize(int node){
        return size[findUPar(node)];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        DisjointSet ds(n);
        unordered_set<int> malware(initial.begin(),initial.end());
        vector<int> clean;
        for(int i=0;i<n;i++) if(!malware.count(i)) clean.push_back(i);

        for(int i=0;i<clean.size();i++){
            for(int j=i+1;j<clean.size();j++){
                if(graph[clean[i]][clean[j]]) ds.unionBySize(clean[i],clean[j]);
            }
        }

        unordered_map<int, unordered_set<int>> infectednode;
        unordered_map<int,int> infectedcnt;
        for(const int &node : initial){
            for(const int &c : clean){
                if(graph[node][c]){
                    int root=ds.findUPar(c);
                    infectednode[node].insert(root);
                }
            }
        }

        for(auto &it:infectednode){
            for(int comp : it.second) infectedcnt[comp]++;
        }

        sort(initial.begin(),initial.end());
        int res=initial[0], maxsaved=-1;
        for(const int &node : initial){
            int saved=0;
            for(int comp : infectednode[node]){
                if(infectedcnt[comp]==1) saved += ds.getSize(comp);
            }
            if(saved>maxsaved || (saved==maxsaved && node<res)){
                maxsaved=saved;
                res=node;
            }
        }
        return res;
    }
};